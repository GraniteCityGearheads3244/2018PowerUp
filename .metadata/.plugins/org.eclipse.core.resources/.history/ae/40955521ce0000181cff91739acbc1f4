// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot;

import org.usfirst.frc3244.SuperSirAntsABot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton a;
    public JoystickButton b;
    public JoystickButton y;
    public JoystickButton x;
    public JoystickButton rB;
    public JoystickButton lB;
    public JoystickButton start;
    public JoystickButton stop;
    public Joystick xbox_Driver;
    public Joystick xbox_CoDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox_CoDriver = new Joystick(1);
        
        xbox_Driver = new Joystick(0);
        
        stop = new JoystickButton(xbox_Driver, 7);
        stop.whileHeld(new Dumby());
        start = new JoystickButton(xbox_Driver, 8);
        start.whileHeld(new Dumby());
        lB = new JoystickButton(xbox_Driver, 5);
        lB.whileHeld(new Dumby());
        rB = new JoystickButton(xbox_Driver, 6);
        rB.whileHeld(new Dumby());
        x = new JoystickButton(xbox_Driver, 3);
        x.whileHeld(new Dumby());
        y = new JoystickButton(xbox_Driver, 4);
        y.whileHeld(new Dumby());
        b = new JoystickButton(xbox_Driver, 2);
        b.whileHeld(new Dumby());
        a = new JoystickButton(xbox_Driver, 1);
        a.whileHeld(new Dumby());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Dumby", new Dumby());
        SmartDashboard.putData("Intake_Cube", new Intake_Cube());
        SmartDashboard.putData("Intake_Eject", new Intake_Eject());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox_Driver() {
        return xbox_Driver;
    }

    public Joystick getXbox_CoDriver() {
        return xbox_CoDriver;
    }
    
    public boolean driveTurboMode() {
    	int GAMEPAD_XBOX_LEFT_BUTTON = 5;
    	int GAMEPAD_XBOX_LEFT_TRIGGER = 2;
		return(xbox_Drive.getRawButton(GAMEPAD_XBOX_LEFT_BUTTON) || xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER)>0.2);
		
	}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

