// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SpeckCheck;

import org.usfirst.frc3244.SpeckCheck.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3244.SpeckCheck.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	private double m_DeadBand = .15;
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakeReverse;
    public JoystickButton intakeLaunch;
    public Joystick x_BoxDirver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        x_BoxDirver = new Joystick(0);
        
        intakeLaunch = new JoystickButton(x_BoxDirver, 1);
        intakeLaunch.whileHeld(new IntakeRun());
        intakeReverse = new JoystickButton(x_BoxDirver, 3);
        intakeReverse.whileHeld(new IntakeRun(false));


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive With Joystick", new DriveWithJoystick());
        SmartDashboard.putData("ScissorToSetpoint", new ScissorToSetpoint());
        SmartDashboard.putData("IntakeRun", new IntakeRun());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getX_BoxDirver() {
        return x_BoxDirver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    
    public double get_X_BoxDriverStrafe(){
		int axis = 1;
		int invert = -1;
		if(Math.abs(x_BoxDirver.getRawAxis(axis))>m_DeadBand) {
			return invert * x_BoxDirver.getRawAxis(axis);
		}else {
			return 0.0;
		}
	}

	public double get_X_BoxDriverSpeed() {
		int axis = 0;
		int invert = -1;
		if(Math.abs(x_BoxDirver.getRawAxis(axis))>m_DeadBand) {
			return invert * x_BoxDirver.getRawAxis(axis);
		}else {
			return 0.0;
		}
	}

	public double get_X_BoxDriverRotation() {
		int axis = 4;
		int invert = 1;
		if(Math.abs(x_BoxDirver.getRawAxis(axis))>m_DeadBand) {
			return invert * x_BoxDirver.getRawAxis(axis);
		}else {
			return 0.0;
		}
	}
	
}

