// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.subsystems;

import org.usfirst.frc3244.HungryVonHippo.Robot;
import org.usfirst.frc3244.HungryVonHippo.RobotMap;
import org.usfirst.frc3244.HungryVonHippo.commands.*;
import org.usfirst.frc3244.HungryVonHippo.util.Utils;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class FlyWheel extends Subsystem {
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Indexer = RobotMap.flyWheelmotor_Indexer;
    private final WPI_TalonSRX motor_FlyWheel = RobotMap.flyWheelmotor_FlyWheel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    	private boolean m_AtSpeed = false;
    	private double m_IndexSpeed = 0.0;
    	private boolean m_hold_Elevator = false;
	 	
	 	private boolean m_useVoltageRamp = true;
	 	private double m_voltageRampRate = 25.0;//48.0; // in volts/second
	 	private boolean m_breakMode = false;

	 	private double m_encoderUnitsPerRev = 80*4;

	 	// member variables to support closed loop mode
	 	private boolean m_closedLoopMode = true;
	 	private double m_maxWheelSpeed = 900;     // empirically measured around 900
		private double m_FlyWheelSpeed;
	  


    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void My_FlyWheel_Run(double percent){
    	
    	/* Speed mode */
        m_FlyWheelSpeed = percent * m_maxWheelSpeed* m_encoderUnitsPerRev / 600;
        /* 4096 Units/Rev * 500 RPM / 600 100ms/min in either direction: velocity setpoint is in units/100ms */
				
        m_hold_Elevator = true;

    	//motor_FlyWheel.set(m_FlyWheelSpeed); /* 900 RPM in either direction */
    	motor_FlyWheel.set(ControlMode.Velocity, m_FlyWheelSpeed);
    	
    }
    
    public void My_FlyWheel_Stop(){
    	motor_FlyWheel.set(0);
    	m_hold_Elevator = false;
    }
    
    public double My_GetFlyWheelSpeed_Target(){
    	return m_FlyWheelSpeed;
    }
    public double My_GetFlyWheelSpeed_Acctual(){
    	//return motor_FlyWheel.getSpeed();
    	return motor_FlyWheel.getSelectedSensorVelocity(0); //(int pidIdx)
    }
    
    public void My_Fuel_Indexer_Run(double power){
    	m_IndexSpeed = power;
    	motor_Indexer.set(m_IndexSpeed);
    }
    
    public void My_Fuel_Indexer_Stop(){
    	m_IndexSpeed = 0;
    	motor_Indexer.set(m_IndexSpeed);
    }
    
    public boolean My_FlyWheel_AtSpeed(){
    	double fw_acct = Robot.flyWheel.My_GetFlyWheelSpeed_Acctual();
     	double fw_target =Robot.flyWheel.My_GetFlyWheelSpeed_Target();
     	
     	if(fw_acct > (fw_target-(fw_target*.10))){
     		m_AtSpeed = true;
     	}else{
     		m_AtSpeed = false;
     	}
     	
     	//Should look at _talon.getClosedLoopError()
     	//return motor_FlyWheel.getClosedLoopError() < fw_target * .1;
    	return m_AtSpeed;
     }
    public void resetFlyWheelAtSpeed(){
    	m_AtSpeed = false;
    }
    
    public boolean My_getIndexer_AtSpeed(){
    	return m_IndexSpeed != 0.0;
    }
    
    public void updateSmartDashboard() {

    	//Control Launch Pad Status LED's
    	Robot.oi.launchPad.setOutput(10, m_AtSpeed);
    	Robot.oi.launchPad.setOutput(11, My_getIndexer_AtSpeed());
    	
    	//Send continuous Data to SmartDashboard
		SmartDashboard.putNumber("Fly Wheel Setpoint" , Utils.twoDecimalPlaces(m_FlyWheelSpeed));
		SmartDashboard.putNumber("Fly Wheel SetPiont Pot", Utils.twoDecimalPlaces(Robot.oi.get_FlyWheel_Command()*100));
    	
		//Only Send this stuff is DEBUG is enabled
    	if (Robot.DEBUG) {	
			//SmartDashboard.putNumber("Fly Wheel RPM", motor_FlyWheel.getSpeed());
			SmartDashboard.putNumber("Fly Wheel RPM", motor_FlyWheel.getSelectedSensorVelocity(0));
		}
    }

	public boolean My_getHold_Elevator() {
		// TODO Auto-generated method stub
		return m_hold_Elevator;
	}
		
}

