// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.subsystems;

import org.usfirst.frc3244.HungryVonHippo.RobotMap;
import org.usfirst.frc3244.HungryVonHippo.commands.*;

import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Winch extends Subsystem {

	public static final double CLIMB_SPEED = 1;
	public static final double CLIMB_ENGAGE = .3;
    

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Winch = RobotMap.winchmotor_Winch;
    private final DigitalInput limitSwitch_Left = RobotMap.winchlimitSwitch_Left;
    private final DigitalInput limitSwitch_Right = RobotMap.winchlimitSwitch_Right;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final BuiltInAccelerometer tiltSensor = RobotMap.roboRioAccelerometer;
    

    Counter ls1Counter = new Counter(limitSwitch_Left);
    Counter ls2Counter = new Counter(limitSwitch_Right);
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean isSwitchSet(){
    	return ls1Counter.get() + ls2Counter.get() > 0;
    }
    
    public void initializeLS_Counters(){
    	ls1Counter.reset();
    	ls2Counter.reset();
    }
    
    public void My_Winch_Jog_Up(double speed){
    	//This can only travel forwards
    	motor_Winch.set(Math.abs(speed));
    }

	public boolean isSwitchSet_Before_Start() {
		return !limitSwitch_Left.get() || !limitSwitch_Right.get() ;
	}
    
}

