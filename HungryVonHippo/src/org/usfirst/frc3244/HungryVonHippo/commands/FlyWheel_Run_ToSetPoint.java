// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.commands;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.HungryVonHippo.Robot;

/**
 *
 */
public class FlyWheel_Run_ToSetPoint extends Command {

	private double m_power;
	private boolean m_IndexerStarted = false;
	
	public static final double PIN_LEFT_FUEL_POWER = 0.75;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FlyWheel_Run_ToSetPoint(double power) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.flyWheel);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_power = power;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Turn On the Front LED ring if its not already On
    	Robot.vision_hardware.My_Left_Forward(true);
    	
    	//First Enabled so force the Indexer to wait till the Flywheel is at speed
    	m_IndexerStarted = false;	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Start Flywheel
    	Robot.flyWheel.My_FlyWheel_Run(m_power);
    	
    	//Start Indexer when Flywheel is at speed
    	if(Robot.flyWheel.My_FlyWheel_AtSpeed() || m_IndexerStarted){
    		Robot.flyWheel.My_Fuel_Indexer_Run(1);
    		m_IndexerStarted = true; // If it dips bellow the set point keep it indexing
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false; //All triggers should simply be held true till done
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Turn off the Camera LED ring
    	Robot.vision_hardware.My_Left_Forward(false);
    	//Stop the Flywheel and Indexer
    	Robot.flyWheel.My_FlyWheel_Stop();
    	Robot.flyWheel.My_Fuel_Indexer_Stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
}
