// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot2;

import org.usfirst.frc3244.SuperSirAntsABot2.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.InternalButton;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3244.SuperSirAntsABot2.subsystems.*;
import org.usfirst.frc3244.SuperSirAntsABot2.util.AndNOTJoystickButton2;
import org.usfirst.frc3244.SuperSirAntsABot2.util.JoystickAxisButton;
import org.usfirst.frc3244.SuperSirAntsABot2.util.JoystickPOVButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xBox_Driver;
    public Joystick xBox_CoDriver;
    public Joystick launchPad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
  //Xbox game pad Channels
    public static final int GAMEPAD_XBOX_LEFT_X_AXIS = 0;//
    public static final int GAMEPAD_XBOX_LEFT_Y_AXIS = 1;//
	public static final int GAMEPAD_XBOX_LEFT_TRIGGER = 2;//
	public static final int GAMEPAD_XBOX_RIGHT_TRIGGER = 3;//
	public static final int GAMEPAD_XBOX_RIGHT_X_AXIS = 4;//
	public static final int GAMEPAD_XBOX_RIGHT_Y_AXIS = 5;//

	public static final int GAMEPAD_XBOX_A_BUTTON = 1;//
	public static final int GAMEPAD_XBOX_B_BUTTON = 2;//
	public static final int GAMEPAD_XBOX_X_BUTTON = 3;//
	public static final int GAMEPAD_XBOX_Y_BUTTON = 4;//
	public static final int GAMEPAD_XBOX_LEFT_BUTTON = 5;//
	public static final int GAMEPAD_XBOX_RIGHT_BUTTON = 6;//
	public static final int GAMEPAD_XBOX_RESET_BUTTON = 7;//
	public static final int GAMEPAD_XBOX_START_BUTTON = 8;//
	public static final int GAMEPAD_XBOX_LEFT_STICK_BUTTON = 9;
	public static final int GAMEPAD_XBOX_RIGHT_STICK_BUTTON = 10;
	
	public JoystickButton a_xBox_Driver;
	public JoystickButton b_xBox_Driver;
	public JoystickButton x_xBox_Driver;
	public JoystickButton y_xBox_Driver;
	public JoystickButton lb_xBox_Driver;
	public JoystickButton rb_xBox_Driver;
	public JoystickButton start_xBox_Driver;
	public JoystickButton reset_xBox_Driver;
   
	public JoystickAxisButton rt_xBox_Driver;
   
	public JoystickPOVButton povNorth_xBox_Driver;
	public JoystickPOVButton povSouth_xBox_Driver;
	public JoystickPOVButton povWest_xBox_Driver;
	public JoystickPOVButton povEast_xBox_Driver;
	
   
	public Joystick xbox_xBox_CoDriver;
	public JoystickButton a_xBox_CoDriver;
	public JoystickButton b_xBox_CoDriver;
	public JoystickButton x_xBox_CoDriver;
	public JoystickButton y_xBox_CoDriver;
	public JoystickButton lb_xBox_CoDriver;
	public JoystickButton rb_xBox_CoDriver;
	public AndNOTJoystickButton2 start_xBox_CoDriver;
	public JoystickButton reset_xBox_CoDriver;
   
	public JoystickAxisButton rt_xBox_CoDriver;
   
	public JoystickButton btn1_launchPad;
	public JoystickButton btn2_launchPad;
	public JoystickButton btn3_launchPad;
	public JoystickButton btn4_launchPad;
	public JoystickButton btn5_launchPad;
	public JoystickButton btn6_launchPad;
	public JoystickButton btn7_launchPad;
	public JoystickButton btn8_launchPad;
	public JoystickButton btn9_launchPad;
	public JoystickButton btn10_launchPad;
	public JoystickButton btn11_launchPad;
   
    public OI() {
    	setUp_Controler_xBox_Driver();
    	setUp_Controler_xBox_CoDriver();
    	setUp_Controler_LaunchPad();
    	setUp_SmartDashboard_Buttons();
    	setUp_OR_Buttons(); //Do this after all joy sticks are declared. 
    	
    }

    private void setUp_Controler_xBox_Driver(){
    	xBox_Driver = new Joystick(0);
    }
    
    private void setUp_Controler_xBox_CoDriver(){
    	xBox_CoDriver = new Joystick(1);
    }
    
    private void setUp_Controler_LaunchPad(){
    	launchPad = new Joystick(2);
    }
    private void setUp_SmartDashboard_Buttons(){
    	//example = new InternalButton();
    	//example.whileHeld(new CMD());
    	SmartDashboard.putData("Intake Cube", new IntakeCube());
    	SmartDashboard.putData("Intake Eject", new IntakeLaunch());
    	
    	SmartDashboard.putData("Scissor to DOWN", new ScissorToSetpoint(Robot.scissor.DOWN));
    	SmartDashboard.putData("Scissor to SWITCH", new ScissorToSetpoint(Robot.scissor.SWITCH));
    	
    }
    private void setUp_OR_Buttons(){
    
    }
    
    private double stickClamp(double value, double min, double max){
    	if(value>max){
    		return max;
    	}else if(value < min){
    		return min;
    	}else{
    		return value;
    	}
    }
    private double stickDeadBand(double value, double deadband){
    	if(Math.abs(value)<deadband){
    		return 0;
    	}else{
    		return value;
    	}
    }
    public double driveX() {
    	return(stickDeadBand(-xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_X_AXIS),.2));
	}
	
    //Strife
	public double driveY() {
		// The driveY is the "Y" Axis of the Driver Gamepad.
		// However, the joysticks give -1.0 on the Y axis when pushed forward
		// This method reverses that, so that positive numbers are forward
		return (stickDeadBand(-xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_Y_AXIS),.2));
	}
	public double driveLTigger(){
		return xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER);
	}
	public double driveRotation() {
		return stickDeadBand(xBox_Driver.getRawAxis(GAMEPAD_XBOX_RIGHT_X_AXIS),.2);
	}

	public boolean driveTurboMode() {
		return(xBox_Driver.getRawButton(GAMEPAD_XBOX_LEFT_BUTTON) || xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER)>0.2);
		
	}
	public boolean crawlBackward() {
        return(xBox_Driver.getRawButton(GAMEPAD_XBOX_A_BUTTON));
       
    }
	public boolean crawlForward() {
    	return(xBox_Driver.getRawButton(GAMEPAD_XBOX_Y_BUTTON));
    }
    
    public boolean crawlLeft() {
    	return(xBox_Driver.getRawButton(GAMEPAD_XBOX_B_BUTTON));
    }
    
    public boolean crawlRight() {
    	return(xBox_Driver.getRawButton(GAMEPAD_XBOX_X_BUTTON));
    }


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxBox_Driver() {
        return xBox_Driver;
    }

    public Joystick getxBox_CoDriver() {
        return xBox_CoDriver;
    }

    public Joystick getlaunchPad() {
        return launchPad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

