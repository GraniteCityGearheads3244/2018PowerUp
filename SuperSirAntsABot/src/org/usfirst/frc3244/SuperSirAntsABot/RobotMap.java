// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainMotor_Left_Front;
    public static WPI_TalonSRX driveTrainMotor_Left_Rear;
    public static WPI_TalonSRX driveTrainMotor_Right_Front;
    public static WPI_TalonSRX driveTrainMotor_Right_Rear;
    public static MecanumDrive driveTrainMecanumDrive1;
    public static WPI_TalonSRX winchMotor;
    public static DoubleSolenoid winchDoubleSolenoid;
    public static WPI_TalonSRX scissorMotor_Right_Master;
    public static WPI_TalonSRX scissorMotor_Left_Slave;
    public static SpeedController intakeMotor_Right;
    public static SpeedController intakeMotor_Left;
    public static DoubleSolenoid intakeWrist;
    public static DoubleSolenoid intakeRollers;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static PigeonIMU _pidgeyIMU;
    public static ADXRS450_Gyro adrxs450_Gyro;
    
    //public static boolean isCompetitionBot = true;
    public static boolean isCompetitionBot = true;
	
	//Start Code to use the NorticSpeedControler
    public enum RobotDriveTrainSettings {
    	FORWARD_BACKWARD_FACTOR(1,.5),
    	ROTATION_FACTOR(1.25,.5),
     	STRAFE_FACTOR(2,.75);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
		RobotDriveTrainSettings(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainMotor_Left_Front = new WPI_TalonSRX(1);
        
        
        driveTrainMotor_Left_Rear = new WPI_TalonSRX(2);
        
        
        driveTrainMotor_Right_Front = new WPI_TalonSRX(3);
        
        
        driveTrainMotor_Right_Rear = new WPI_TalonSRX(4);
        
        
        driveTrainMecanumDrive1 = new MecanumDrive(driveTrainMotor_Left_Front, driveTrainMotor_Left_Rear,
              driveTrainMotor_Right_Front, driveTrainMotor_Right_Rear);
        LiveWindow.addActuator("DriveTrain", "Mecanum Drive 1", driveTrainMecanumDrive1);
        driveTrainMecanumDrive1.setSafetyEnabled(true);
        driveTrainMecanumDrive1.setExpiration(0.1);
        driveTrainMecanumDrive1.setMaxOutput(1.0);

        
        
        
        winchMotor = new WPI_TalonSRX(7);
        
        
        winchDoubleSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Winch", "Double Solenoid", winchDoubleSolenoid);
        
        scissorMotor_Right_Master = new WPI_TalonSRX(6);
        
        
        scissorMotor_Left_Slave = new WPI_TalonSRX(5);
        
        
        intakeMotor_Right = new VictorSP(1);
        LiveWindow.addActuator("Intake", "Motor_Right", (VictorSP) intakeMotor_Right);
        intakeMotor_Right.setInverted(false);
        intakeMotor_Left = new VictorSP(2);
        LiveWindow.addActuator("Intake", "Motor_Left", (VictorSP) intakeMotor_Left);
        intakeMotor_Left.setInverted(false);
        intakeWrist = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("Intake", "Wrist", intakeWrist);
        
        intakeRollers = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Intake", "Rollers", intakeRollers);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    // Set the Scissor Motor Left to follow the Scissor Motor Right Master 
        
        
        _pidgeyIMU = new PigeonIMU(winchMotor);

        try{
        	DriverStation.reportWarning("Init ADXRS450_Gyro", false);
        	adrxs450_Gyro = new ADXRS450_Gyro();
        }catch (RuntimeException ex ) {
        	System.out.println("Hello from the adrxs450_Gyro runtimeExcept");
            DriverStation.reportError("Error instantiating adrxs450_Gyro:  " + ex.getMessage(), true);
        }
            Timer.delay(2);

        
    }
}
