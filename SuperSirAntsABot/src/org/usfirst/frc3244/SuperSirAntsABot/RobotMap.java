// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainMotor_Left_Front;
    public static WPI_TalonSRX driveTrainMotor_Left_Rear;
    public static WPI_TalonSRX driveTrainMotor_Right_Front;
    public static WPI_TalonSRX driveTrainMotor_Right_Rear;
    public static MecanumDrive driveTrainMecanumDrive1;
    public static SpeedController winchSpeedController1;
    public static WPI_TalonSRX scissorTalonSRX1;
    public static SpeedController intakeSpeedController1;
    public static SpeedController intakeSpeedController2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  //PDP Channles
    public static final int DRIVE_BACK_RIGHT_PDP = 0;
	public static final int DRIVE_FRONT_RIGHT_PDP = 1;
	public static final int WINCH_PDP = 2;
	public static final int NC3 = 3;
	public static final int WRIST_PDP = 4;
	public static final int KANGAROO_POWER_PDP = 5;
	public static final int VOLTMETER_PDP = 6;
	public static final int NC7_PDP = 7;
	public static final int LIGHTS_SPIKE1_PDP = 8;
	public static final int LIGHTS_SPIKE2_PDP = 9;
	public static final int INTAKE_PDP = 10;
	public static final int FUEL_INDEXER_PDP = 11;
	public static final int NC12_PDP = 12;
	public static final int DRIVE_FRONT_LEFT_PDP = 13;
	public static final int FLYWHEEL_PDP = 14;
	public static final int DRIVE_BACK_LEFT_PDP = 15;
	
    //public static boolean isCompetitionBot = true;
    public static boolean isCompetitionBot = true;
	
	//Start Code to use the NorticSpeedControler
    public enum RobotDriveTrainSettings {
    	FORWARD_BACKWARD_FACTOR(1,.5),
    	ROTATION_FACTOR(1.25,.5),
     	STRAFE_FACTOR(2,.75);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
		RobotDriveTrainSettings(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainMotor_Left_Front = new WPI_TalonSRX(1);
        
        
        driveTrainMotor_Left_Rear = new WPI_TalonSRX(2);
        
        
        driveTrainMotor_Right_Front = new WPI_TalonSRX(3);
        
        
        driveTrainMotor_Right_Rear = new WPI_TalonSRX(4);
        
        
        driveTrainMecanumDrive1 = new MecanumDrive(driveTrainMotor_Left_Front, driveTrainMotor_Left_Rear,
              driveTrainMotor_Right_Front, driveTrainMotor_Right_Rear);
        LiveWindow.addActuator("DriveTrain", "Mecanum Drive 1", driveTrainMecanumDrive1);
        driveTrainMecanumDrive1.setSafetyEnabled(true);
        driveTrainMecanumDrive1.setExpiration(0.1);
        driveTrainMecanumDrive1.setMaxOutput(1.0);

        winchSpeedController1 = new VictorSP(0);
        LiveWindow.addActuator("Winch", "Speed Controller 1", (VictorSP) winchSpeedController1);
        winchSpeedController1.setInverted(false);
        scissorTalonSRX1 = new WPI_TalonSRX(0);
        
        
        intakeSpeedController1 = new Spark(1);
        LiveWindow.addActuator("Intake", "Speed Controller 1", (Spark) intakeSpeedController1);
        intakeSpeedController1.setInverted(false);
        intakeSpeedController2 = new Spark(2);
        LiveWindow.addActuator("Intake", "Speed Controller 2", (Spark) intakeSpeedController2);
        intakeSpeedController2.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
