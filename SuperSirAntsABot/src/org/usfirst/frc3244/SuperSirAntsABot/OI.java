// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot;

import org.usfirst.frc3244.SuperSirAntsABot.util.JoystickPOVButton;
import org.usfirst.frc3244.SuperSirAntsABot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.InternalButton;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
   


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton a;
    public JoystickButton b;
    public JoystickButton y;
    public JoystickButton x;
    public JoystickButton rB;
    public JoystickButton lB;
    public JoystickButton start;
    public JoystickButton stop;
    public Joystick xbox_Driver;
    public Joystick xbox_CoDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public Joystick launchPad;

  //Xbox game pad Channels
    public static final int GAMEPAD_XBOX_LEFT_X_AXIS = 0;//
    public static final int GAMEPAD_XBOX_LEFT_Y_AXIS = 1;//
	public static final int GAMEPAD_XBOX_LEFT_TRIGGER = 2;//
	public static final int GAMEPAD_XBOX_RIGHT_TRIGGER = 3;//
	public static final int GAMEPAD_XBOX_RIGHT_X_AXIS = 4;//
	public static final int GAMEPAD_XBOX_RIGHT_Y_AXIS = 5;//

	public static final int GAMEPAD_XBOX_A_BUTTON = 1;//
	public static final int GAMEPAD_XBOX_B_BUTTON = 2;//
	public static final int GAMEPAD_XBOX_X_BUTTON = 3;//
	public static final int GAMEPAD_XBOX_Y_BUTTON = 4;//
	public static final int GAMEPAD_XBOX_LEFT_BUTTON = 5;//
	public static final int GAMEPAD_XBOX_RIGHT_BUTTON = 6;//
	public static final int GAMEPAD_XBOX_RESET_BUTTON = 7;//
	public static final int GAMEPAD_XBOX_START_BUTTON = 8;//
	public static final int GAMEPAD_XBOX_LEFT_STICK_BUTTON = 9;
	public static final int GAMEPAD_XBOX_RIGHT_STICK_BUTTON = 10;
	
	public JoystickPOVButton povNorth_xBox_Driver;
	public JoystickPOVButton povSouth_xBox_Driver;
	public JoystickPOVButton povWest_xBox_Driver;
	public JoystickPOVButton povEast_xBox_Driver;
	
	public JoystickButton btn1_launchPad;
	public JoystickButton btn2_launchPad;
	public JoystickButton btn3_launchPad;
	public JoystickButton btn4_launchPad;
	public JoystickButton btn5_launchPad;
	public JoystickButton btn6_launchPad;
	public JoystickButton btn7_launchPad;
	public JoystickButton btn8_launchPad;
	public JoystickButton btn9_launchPad;
	public JoystickButton btn10_launchPad;
	public JoystickButton btn11_launchPad;
	
	public InternalButton example;
	
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox_CoDriver = new Joystick(1);
        
        xbox_Driver = new Joystick(0);
        
        stop = new JoystickButton(xbox_Driver, 7);
        stop.whileHeld(new Dumby());
        start = new JoystickButton(xbox_Driver, 8);
        start.whileHeld(new Dumby());
        lB = new JoystickButton(xbox_Driver, 5);
        lB.whileHeld(new Dumby());
        rB = new JoystickButton(xbox_Driver, 6);
        rB.whileHeld(new Dumby());
        x = new JoystickButton(xbox_Driver, 3);
        x.whileHeld(new Dumby());
        y = new JoystickButton(xbox_Driver, 4);
        y.whileHeld(new Dumby());
        b = new JoystickButton(xbox_Driver, 2);
        b.whileHeld(new Dumby());
        a = new JoystickButton(xbox_Driver, 1);
        a.whileHeld(new Dumby());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Dumby", new Dumby());
        SmartDashboard.putData("Intake_Cube", new Intake_Cube());
        SmartDashboard.putData("Intake_Eject", new Intake_Eject());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    private void setUp_Controler_xBox_Driver(){
    	
    }
    private void setUp_Controler_xBox_CoDriver(){
    	
    }
    private void setUp_Controler_LaunchPad(){
    	
    }
    private void setUp_SmartDashboard_Buttons(){
    	example = new InternalButton();
    }
    private void setUp_OR_Buttons(){
    	
    }
    private double stickClamp(double value, double min, double max){
    	if(value>max){
    		return max;
    	}else if(value < min){
    		return min;
    	}else{
    		return value;
    	}
    }
    private double stickDeadBand(double value, double deadband){
    	if(Math.abs(value)<deadband){
    		return 0;
    	}else{
    		return value;
    	}
    }
    public double driveX() {
    	return(stickDeadBand(-xbox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_X_AXIS),.2));
	}
	
    //Strife
	public double driveY() {
		// The driveY is the "Y" Axis of the Driver Gamepad.
		// However, the joysticks give -1.0 on the Y axis when pushed forward
		// This method reverses that, so that positive numbers are forward
		return (stickDeadBand(-xbox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_Y_AXIS),.2));
	}
	public double driveLTigger(){
		return xbox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER);
	}
	public double driveRotation() {
		return stickDeadBand(xbox_Driver.getRawAxis(GAMEPAD_XBOX_RIGHT_X_AXIS),.2);
	}

	public boolean driveTurboMode() {
		return(xbox_Driver.getRawButton(GAMEPAD_XBOX_LEFT_BUTTON) || xbox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER)>0.2);
		
	}
	public boolean crawlBackward() {
        return(xbox_Driver.getRawButton(GAMEPAD_XBOX_A_BUTTON));
       
    }
	public boolean crawlForward() {
    	return(xbox_Driver.getRawButton(GAMEPAD_XBOX_Y_BUTTON));
    }
    
    public boolean crawlLeft() {
    	return(xbox_Driver.getRawButton(GAMEPAD_XBOX_B_BUTTON));
    }
    
    public boolean crawlRight() {
    	return(xbox_Driver.getRawButton(GAMEPAD_XBOX_X_BUTTON));
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox_Driver() {
        return xbox_Driver;
    }

    public Joystick getXbox_CoDriver() {
        return xbox_CoDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

